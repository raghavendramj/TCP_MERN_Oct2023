cksMongoDB Notes
---------------
MongoDB is a document database. It stores data in a type of JSON format called BSON.
MongoDB is a No SQL database.
It is an open-source, cross-platform, document-oriented database written in C++.

Purpose of Building MongoDB
------------------------------
All the modern applications require big data, fast features development, flexible deployment, and the older database systems not competent enough, so the MongoDB was needed.

The primary purpose of building MongoDB is:
---------------------------------------------
	Scalability
	Performance
	High Availability
Scaling from single server deployments to large, complex multi-site architectures.

Key points of MongoDB
	Develop Faster
	Deploy Easier
	Scale Bigger


Features of MongoDB
---------------------------------------------
These are some important features of MongoDB:

1. Support ad hoc queries
	In MongoDB, you can search by field, range query and it also supports regular expression searches.
2. Indexing
	You can index any field in a document.
3. Replication
	MongoDB supports Master Slave replication.
	A master can perform Reads and Writes and a Slave copies data from the master and can only be used for reads or back up (not writes)
4. Duplication of data
	MongoDB can run over multiple servers. The data is duplicated to keep the system up and also keep its running condition in case of hardware failure.
5. Load balancing
	It has an automatic load balancing configuration because of data placed in shards.
6. Supports map reduce and aggregation tools.
7. Uses JavaScript instead of Procedures.
8. It is a schema-less database written in C++.
9. Provides high performance.
10. Stores files of any size easily without complicating your stack.
11. Easy to administer in the case of failures.
12. It also supports:
	JSON data model with dynamic schemas
	Auto-sharding for horizontal scalability
	Built in replication for high availability
	Now a day many companies using MongoDB to create new types of applications, improve performance and availability.

Databases can be divided in 3 types
------------------------------------
	RDBMS (Relational Database Management System)
	OLAP (Online Analytical Processing)
	NoSQL (recently developed database)

NoSQL Database
---------------
	NoSQL Database is used to refer a non-SQL or non relational database.

	It provides a mechanism for storage and retrieval of data other than tabular relations model used in relational databases. 
	NoSQL database doesn't use tables for storing data. It is generally used to store big data and real-time web applications.

Advantages of NoSQL
-------------------
	It supports query language.
	It provides fast performance.
	It provides horizontal scalability.

MongoDB Advantages
------------------
	MongoDB is schema less. It is a document database in which one collection holds different documents.
	There may be difference between number of fields, content and size of the document from one to other.
	Structure of a single object is clear in MongoDB.
	There are no complex joins in MongoDB.
	MongoDB provides the facility of deep query because it supports a powerful dynamic query on documents.
	It is very easy to scale.
	It uses internal memory for storing working sets and this is the reason of its fast access.

MongoDB Datatypes
-----------------
	String	String is the most commonly used datatype. It is used to store data. A string must be UTF 8 valid in mongodb.
	Integer	Integer is used to store the numeric value. It can be 32 bit or 64 bit depending on the server you are using.
	Boolean	This datatype is used to store boolean values. It just shows YES/NO values.
	Double	Double datatype stores floating point values.
	Min/Max Keys	This datatype compare a value against the lowest and highest bson elements.
	Arrays	This datatype is used to store a list or multiple values into a single key.
	Object	Object datatype is used for embedded documents.
	Null	It is used to store null values.
	Symbol	It is generally used for languages that use a specific type.
	Date	This datatype stores the current date or time in unix time format. It makes you possible to specify your own date time by creating object of date and pass the value of date, month, year into it.

Data Modeling in MongoDB
------------------------
{
	_id: POST_ID
	title: TITLE_OF_POST,
	description: POST_DESCRIPTION,
	by: POST_BY,
	url: URL_OF_POST,
	tags: [TAG1, TAG2, TAG3],
	likes: TOTAL_LIKES,
	comments: [{
			user: 'COMMENT_BY',
			message: TEXT,
			datecreated: DATE_TIME,
			like: LIKES
		},
		{
			user: 'COMMENT_BY',
			message: TEST,
			dateCreated: DATE_TIME,
			like: LIKES
		}]
	}
}

https://www.mongodb.com/try/download/community

Start the MongoDB:-
------------------
Step1 :- Start the Daemon first: mongoD
Step2 :- Start the mongo : mongo

Create Database :-
------------------
Syntax :- use <DB_NAME>;
Ex:-	use entertainment;

Drop Database :-
----------------
db.dropDatabase()
{ "ok" : 1 }

Create Collection :-
----------------
db.createCollection(name, options)

Way 1:- Just create empty collection
	> use entertainment;
	> db.createCollection("movie", { capped : true, size : 6142800, max : 10000 })

Way 2:- Create collection and insert a value!
	> use entertainment;
	> c.movie.insert({name:"Avatar"})

Drop Collection :-
----------------
Syntax :- db.COLLECTION_NAME.drop()
	> use entertainment;
	> show collections;
	> movie
	> db.movie.drop()
	

Querying Documents 
----------------------
insertOne()
-----------
Syntax :- >db.COLLECTION_NAME.insertOne(document);

db.posts.insertOne({
  title: "Learning Mongo",
  body: "Its always fun.",
  category: "News",
  likes: 1,
  tags: ["news", "events"],
  date: Date()
})

insertMany()
-----------
Syntax :- >db.COLLECTION_NAME.insertMany([document1, document2])

db.posts.insertMany([
  {
    title: "React JS",
    body: "Lightweight framework",
    category: "Event",
    likes: 2,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Node JS",
    body: "JavaScript framework",
    category: "Technology",
    likes: 3,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Express JS",
    body: "NodeJs framework",
    category: "Event",
    likes: 4,
    tags: ["news", "events"],
    date: Date()
  }
])

insert()
---------
Syntax :- >db.COLLECTION_NAME.insert(document1)

db.posts.insert([
  {
    title: "React JS",
    body: "Lightweight framework",
    category: "Event",
    likes: 2,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Node JS",
    body: "JavaScript framework",
    category: "Technology",
    likes: 3,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Express JS",
    body: "NodeJs framework",
    category: "Event",
    likes: 4,
    tags: ["news", "events"],
    date: Date()
  }
])



find()
-----------
Syntax :- db.COLLECTION_NAME.find()
Ex:- db.posts.find()

findOne()
-----------
Syntax :- db.COLLECTION_NAME.findOne()
Ex:- db.posts.findOne()

Querying Data
-----------
db.posts.find( {category: "News"} )

Projection
-----------
db.posts.find({}, {title: 1, date: 1})
	Notice that the _id field is also included. This field is always included unless specifically excluded.
	We use a 1 to include a field and 0 to exclude a field.
Note: You cannot use both 0 and 1 in the same object. 
    The only exception is the _id field. 
    You should either specify the fields you would like to include or the fields you would like to exclude.

Where Clause Equivalents in MongoDB
-----------------------------------
Equality
--------
Syntax :- {<key>:{$eg:<value>}}
ex: db.posts.find({title:"Learning Mongo"})
---------------------------------------
select *
from posts
where title="Learning Mongo";

Less Than
----------
Syntax :- {<key>:{$lt:<value>}}
---------------------------------------
ex: db.posts.find({likes : {$lt:4}})
select *
from posts
where likes < 4; 
---------------------------------------
ex: db.posts.find({likes : {$lt:4}}, {_id:0, title:1, likes:1})
select title, likes
from posts
where likes < 4; 
---------------------------------------

Less Than Equals
----------------
Syntax :- {<key>:{$lte:<value>}}
Ex :- db.posts.find({likes:{$lte:4}}, {_id:0, title:1, likes:1})

Greater Than
------------
Syntax :- {<key>:{$gt:<value>}}
Ex :- db.posts.find({likes:{$gt:4}}, {_id:0, title:1, likes:1})

Greater Than Equals
-------------------
Syntax :- {<key>:{$gte:<value>}}
Ex :- db.posts.find({likes:{$gte:4}}, {_id:0, title:1, likes:1})

Not Equals
-----------
Syntax :- {<key>:{$ne:<value>}}
Ex :- db.posts.find({likes:{$ne:4}}, {_id:0, title:1, likes:1})

Values in an array
-------------------
Syntax :- {<key>:{$in:[<value1>, <value2>,……<valueN>]}}
ex :- db.posts.find({title: {$in: ['Node JS', 'React JS']}}, {_id:0, title:1, likes:1})
select title, likes
from posts
where title in ('Node JS', 'React JS');
---------------------------------------


Values not in an array
-------------------
Syntax :- {<key>:{$nin:[<value1>, <value2>,……<valueN>]}}
Ex :- db.posts.find({title:{$nin:["Node JS", "React JS"]}}, {_id:0, title:1})


AND in MongoDB
--------------
Syntax :- db.posts.find({$and: [ {<key1>:<value1>}, { <key2>:<value2>} ] })
ex:- db.posts.find({$and: [{title:'Express JS'}, {likes: 4}]}, {likes: 1, title: 1, _id: 0})

OR in MongoDB
--------------
Syntax :- db.posts.find({$or: [ {<key1>:<value1>}, { <key2>:<value2>} ] })
ex:- db.posts.find({$or: [{title:'Express JS'}, {likes: 2}]}, {likes: 1, title: 1, _id: 0})

OR in MongoDB
--------------
Syntax :- db.posts.find(
    {
        $or: [ {<key1>:<value1>}, { <key2>:<value2>} ], 
        $and: [ {<key1>:<value1>}, { <key2>:<value2>} ] 
    }, 
    {
        likes: 1, 
        title: 1,
         _id: 0
    })
ex:- db.posts.find({$or: [{title:'Express JS'}, {likes: 2}], $and: [{category:'Event'}] }, {likes: 1, title: 1, _id: 0} )

select title, likes
from posts
where title='Express JS' and likes=5;
---------------------------------------

update :-
--------
>db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA)

save()
------
db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})

findOneAndUpdate()
------------------
db.COLLECTION_NAME.findOneAndUpdate(SELECTIOIN_CRITERIA, UPDATED_DATA)

db.empDetails.findOneAndUpdate(
	{First_Name: 'Radhika'},
	{$set: {Age: 30, e_mail: "radhika_sharma.123@newgmail.com"}}
)


db.empDetails.insertMany(
	[
		{
			First_Name: "Radhika",
			Last_Name: "Sharma",
			Age: "26",
			e_mail: "radhika_sharma.123@gmail.com",
			phone: "9000012345"
		},
		{
			First_Name: "Rachel",
			Last_Name: "Christopher",
			Age: "27",
			e_mail: "Rachel_Christopher.123@gmail.com",
			phone: "9000054321"
		},
		{
			First_Name: "Fathima",
			Last_Name: "Sheik",
			Age: "24",
			e_mail: "Fathima_Sheik.123@gmail.com",
			phone: "9000054321"
		},
		{
			First_Name: "Vaibhav",
			Last_Name: "Yagneshwar",
			Age: "26",
			e_mail: "Vaibhav.Yagneshwar@gmail.com",
			phone: "5642512454"
		},
		{
			First_Name: "Rahul",
			Last_Name: "Anand",
			Age: "27",
			e_mail: "Rahul.anand.123@gmail.com",
			phone: "7862121212"
		},
		{
			First_Name: "Raghav",
			Last_Name: "MJ",
			Age: "24",
			e_mail: "raghavmj@gmail.com",
			phone: "9565656111"
		}
	]
)

db.empDetails.findOneAndUpdate(
	{First_Name: 'Radhika'},
	{ $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}
)

updateOne()
-----------
>db.COLLECTION_NAME.updateOne(<filter>, <update>)
db.posts.find( { title: "Learning Mongo" } )
 
db.posts.updateOne(
  { title: "Learning Python" },
  {
    $set:
      {
        title: "Learning mongo",
        body: "Its used for data science!",
        category: "Event",
        likes: 5,
        tags: ["news", "events"],
        date: Date()
      }
  }
)


Update if exists otherwise create new:- { upsert: true }

db.posts.updateOne(
  { title: "Understanding Python" },
  {
    $set:
      {
        title: "Understanding Python",
        body: "Its used for data science!",
        category: "Event",
        likes: 5,
        tags: ["news", "events"],
        date: Date()
      }
  },
  { upsert: true }
)

updateMany() -> Everything together in the table for matching criteria
------------

db.posts.updateMany({}, { $inc: { likes: 1 } })

MongoDB – Field Update Operators
--------------------------------
$currentDate	This operator is used to set the value of a field to current date, either as a Date or a Timestamp.
$inc			This operator is used to increment the value of the field by the specified amount.
$min			This operator is used only to update the field if the specified value is less than the existing field value
$max			This operator is used only to update the field if the specified value is greater than the existing field value.
$mul			This operator is used to multiply the value of the field by the specified amount.
$rename			This operator is used to rename a field.
$setOnInsert	This operator is used to set the value of a field if an update results in an insert of a document. It has no effect on update operations that modify existing documents.

remove()
--------
Syntax :- db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)
Ex:- db.empDetails.remove({"First_Name" : "Radhika"})


Remove One:-
------------
If there are multiple records and you want to delete only the first record, then set justOne parameter in remove() method.
Syntax :- db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)
Ex :- db.empDetails.remove({"First_Name" : "Radhika"}, 1)


Remove All Documents
---------------------
If you don't specify deletion criteria, then MongoDB will delete whole documents from the collection. This is equivalent of SQL's truncate command.
Syntax :- db.COLLECTION_NAME.remove({})
Ex :- db.empDetails.remove({})

The Limit() Method
------------------
Syntax :- db.COLLECTION_NAME.find().limit(NUMBER)
Ex:- db.empDetails.find().limit(2) 

The sort() Method
-----------------
Syntax:- >db.COLLECTION_NAME.find().sort({KEY:1})
Ex:- db.empDetails.find({}, {First_Name: 1, _id:0}).sort({"First_Name":1})

The createIndex() Method
------------------------
Syntax :- >db.COLLECTION_NAME.createIndex({KEY:1})
ex:- db.empDetails.createIndex({First_Name:"text"})
	 db.empDetails.find({$text:{$search:"Fathima"}})

Exercise :-
-----------
Create Database :- 
Create collections.

Students
	-> rollno, name, class
Class
	-> no, room_no, section
Teacher
	-> no, class_no, subject


{
  "Students": [
    {
      "rollno": 1,
      "name": "John Doe",
      "class": "A",
      "teacher_no": 1
    },
    {
      "rollno": 2,
      "name": "Jane Doe",
      "class": "B",
      "teacher_no": 2
    },
    {
      "rollno": 3,
      "name": "Alice Smith",
      "class": "A",
      "teacher_no": 1
    },
    {
      "rollno": 4,
      "name": "Bob Johnson",
      "class": "B",
      "teacher_no": 2
    },
    {
      "rollno": 5,
      "name": "Eva Brown",
      "class": "A",
      "teacher_no": 1
    }
    // Add more student documents as needed
  ],
  "Class": [
    {
      "no": "A",
      "room_no": 101,
      "section": "A1",
      "teacher_no": 1
    },
    {
      "no": "B",
      "room_no": 102,
      "section": "B1",
      "teacher_no": 2
    },
    {
      "no": "C",
      "room_no": 103,
      "section": "C1",
      "teacher_no": 3
    },
    {
      "no": "D",
      "room_no": 104,
      "section": "D1",
      "teacher_no": 4
    },
    {
      "no": "E",
      "room_no": 105,
      "section": "E1",
      "teacher_no": 5
    }
    // Add more class documents as needed
  ],
  "Teacher": [
    {
      "no": 1,
      "class_no": "A",
      "subject": "Math"
    },
    {
      "no": 2,
      "class_no": "B",
      "subject": "Science"
    },
    {
      "no": 3,
      "class_no": "C",
      "subject": "English"
    },
    {
      "no": 4,
      "class_no": "D",
      "subject": "History"
    },
    {
      "no": 5,
      "class_no": "E",
      "subject": "Physics"
    }
    // Add more teacher documents as needed
  ]
}


db.Students.insertMany([
  {
    rollno: 11,
    name: "shreyas",
    class: 2
  },
  {
    rollno: 12,
    name: "srijith",
    class: 1
  },
  {
    rollno: 13,
    name: "srinath",
    class: 3
  }
])
db.Class.insertMany([
  {
    no: 1,
    room_no: 201,
    class: 1
  },
  {
    no: 2,
    room_no: 202,
    class: 2
  },
  {
    no: 3,
    room_no: 203,
    class: 3
  }
])
db.Teacher.insertMany([
  {
    no: 1,
    class_no: 1,
    subject: "Maths"
  },
  {
    no: 2,
    class_no: 2,
    subject: "Science"
  },
  {
    no: 3,
    class_no: 3,
    subject: "History"
  }
])


// Students Collection
{
  _id: ObjectId("1"),
  first_name: "Alice",
  last_name: "Johnson",
  class_id: ObjectId("101"),
  teacher_id: ObjectId("201")
}


// Class Collection
{
  _id: ObjectId("101"),
  class_name: "Biology",
  class_code: "BIO101",
  teacher_id: ObjectId("201"),
  schedule: "Monday, Wednesday, Friday"
}

// Teacher Collection
{
  _id: ObjectId("201"),
  first_name: "Dr. Miller",
  last_name: "Jones",
  subject_taught: "Biology",
  class_taught: "BIO101"
}

db.students.aggregate([
  {
    $lookup: {
      from: "classes",
      localField: "class_id",
      foreignField: "_id",
      as: "class_info"
    }
  },
  {
    $lookup: {
      from: "teachers",
      localField: "teacher_id",
      foreignField: "_id",
      as: "teacher_info"
    }
  }
]);


db.students.insertMany([
  { 
   _id: 1,
    first_name: "Alice",
    last_name: "Johnson",
    class_id: 101,
    teacher_id: 201
  },
  { 
   _id: 2,
    first_name: "Bob",
    last_name: "Smith",
    class_id: 102,
    teacher_id: 202
  }
]);


db.classes.insertMany([
  {
    _id: 101,
    class_name: "Biology",
    class_code: "BIO101",
    teacher_id: 201,
    schedule: "Monday, Wednesday, Friday"
  },
  {
    _id: 102,
    class_name: "Physics",
    class_code: "PHY101",
    teacher_id: 202,
    schedule: "Tuesday, Thursday"
  }
]);




_id: 1,
    first_name: "Alice",
    last_name: "Johnson",
    class_id: 101,
    teacher_id: 201
  },

Students
_id		first_name		last_name		class_id		teacher_id
1 		Alice			Johnson			101				201
2 		Bob				Smith			101				201
3 		Charlie			Davis			101				201
4 		David			Miller			102				202
5		Eva				Wilso			102				202

Classes
_id		class_name		class_code		teacher_id  	schedule 
101		Physics			PHY101			203				Monday, Tuesday				
102		Mathematics		MATH101			202				Wednesday, Thursday
103		Chemistry		CHEM101			204				Monday, Wednesday


db.students.aggregate([
  {
    $lookup: {
      from: "classes",
      localField: "class_id",
      foreignField: "_id",
      as: "class_info"
    }
}])



query ->

1. Get students that belong to class 101

db.students.aggregate([
  {
    $lookup: {
      from: "classes",
      localField: "class_id",
      foreignField: "_id",
      as: "class_info"
    }
  }])

2. Get Students who are studying under teacher 202